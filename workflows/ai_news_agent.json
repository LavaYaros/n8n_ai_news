{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "operation": "getAll",
        "simple": false,
        "filters": {
          "readStatus": "unread",
          "sender": "={{ $json.emails }}"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        416,
        0
      ],
      "id": "983172c6-d444-4632-a70e-6bbf19b1b0d2",
      "name": "Get many messages",
      "webhookId": "997440db-01ee-4e00-948a-a33272f4a342",
      "credentials": {
        "gmailOAuth2": {
          "id": "1Xj7VW8SxrqwNB2q",
          "name": "Gmail account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\n\noutput = []\nfor item in _input.all():\n    subject = item.json.get('subject', '')\n    text = item.json.get('text', '')  \n    #cleaned_text = re.sub(r'\\(http.*?\\)', '', text).strip()\n    output.append({\n        'json': {\n            'subject': subject,\n            'text': text\n        }\n    })\nreturn output"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        624,
        0
      ],
      "id": "e9293702-bba0-4b19-bb23-dd713c5509bb",
      "name": "Code in Python (Beta)"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Summarize the following newsletter:\nText: {{$json[\"text\"]}}"
            },
            {
              "content": "You are a precise newsletter summarizer.\n\nSCOPE (include only if present):\nresearch/model releases; framework/tooling updates; cloud/API changes; RAG/search; serving/performance; data/datasets; fine-tuning/adaptation; evaluation/observability; security/privacy/safety; compliance/standards; multimodal/speech; edge/on-device; hardware/capacity/cost; learning resources (new courses/tutorials/books); helpful platforms/sandboxes; case studies/postmortems with metrics.\n\n\n\nTASK\n1) Split the letter into 1-3 topic chunks (3 maximum). Keep ONLY chunks within SCOPE.  \n2) Give each kept chunk a concise topic name.\n3) Summarize each kept topic in 2–3 factual sentences (key claims, metrics/dates, links if present).\n4) Order topics by importance.\n\nRULES\n- Use only information in the letter; no speculation.\n- If the subject is missing, use “(none)”.\n- If no relevant topics are found, return an empty string.\n\nOUTPUT FORMAT (exactly):\n\n\nTopic: *<topic name>*\n<2–3 sentences>\n\nTopic: *<topic name>*\n<2–3 sentences>",
              "role": "system"
            }
          ]
        },
        "options": {
          "maxTokens": 1000,
          "temperature": 0.4,
          "topP": 0.9
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        832,
        0
      ],
      "id": "88a6cd53-191f-403a-b308-1b669b19fb9d",
      "name": "Message a model",
      "retryOnFail": true,
      "credentials": {
        "openAiApi": {
          "id": "2TjeHfdpkPwGGo6F",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "-1002743171142",
        "text": "={{ $json.content }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1360,
        432
      ],
      "id": "bfcb107f-6de5-45ff-8b8a-27f72fe4dde0",
      "name": "Send a text message",
      "webhookId": "812d1df4-1d3f-426d-81a3-e18b4edd4da7",
      "retryOnFail": true,
      "credentials": {
        "telegramApi": {
          "id": "PQ6EN7qR89YBzTtz",
          "name": "Telegram account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 4
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        32,
        0
      ],
      "id": "c1430e1f-befd-4a42-833b-9aca019be0ce",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "operation": "delete",
        "messageId": "={{ $json.id }}"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        624,
        176
      ],
      "id": "6d5f6bae-f0e2-4dcc-88e3-2206e5fbfd76",
      "name": "Delete a message",
      "webhookId": "30cd4484-4310-416d-b1e8-fb2cfb3ae0b6",
      "credentials": {
        "gmailOAuth2": {
          "id": "1Xj7VW8SxrqwNB2q",
          "name": "Gmail account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1wWgaRjZyCmrWWJQqQRsA4WwgZXai1uFwKHOVuLZSQBU",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "0",
          "mode": "id"
        },
        "combineFilters": "OR",
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        240,
        0
      ],
      "id": "3a7feddc-32d5-4b0e-a31d-ade4834b917c",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "NSsyJ3nb33N6RMn2",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\n\noutput = []\nfor item in _input.all(): \n  content = item.json.get('message').get('content', '')\n  if \"Topic:\" in content:\n    chunks = re.split('Topic:', content)\n    for c in chunks:\n      c = c.strip()\n      if not c:\n        continue\n      first, *rest = c.split('\\n', 1)\n      bolded = f\"<b>{first.strip('*')}</b>\" + (\"\\n\\n\" + rest[0] if rest else \"\")\n      output.append({'json': {'content': bolded}})\n\nreturn output\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1136,
        0
      ],
      "id": "e6a1266e-fb29-46ba-b93f-cff478e4b2e4",
      "name": "Code in Python (Beta)1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1344,
        0
      ],
      "id": "63270447-f044-4e59-b75a-5fa5224cc259",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "unit": "minutes"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1360,
        208
      ],
      "id": "a3cb29f1-032e-480a-8e5b-2d8aa56abe30",
      "name": "Wait",
      "webhookId": "45c89dcc-c241-4069-b938-2bcdd276ee84"
    }
  ],
  "pinData": {},
  "connections": {
    "Get many messages": {
      "main": [
        [
          {
            "node": "Code in Python (Beta)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in Python (Beta)": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Code in Python (Beta)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Get many messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in Python (Beta)1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "timezone": "Europe/Kyiv",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "8EDWc9RJbj3LdNPR",
    "timeSavedPerExecution": 60
  },
  "versionId": "3f2953f5-1393-4f3b-8a2b-e1c0e1d612dc",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "abaf1847f11e3f1859140d8184b939c584e560ede60154b82e0f0971bf68714e"
  },
  "id": "8EDWc9RJbj3LdNPR",
  "tags": []
}